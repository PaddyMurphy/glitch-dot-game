{"version":3,"sources":["components/gameHelpers.js","components/Game.js","components/GameMenu.js","App.js","registerServiceWorker.js","index.js"],"names":["Dot","dotId","width","y","x","status","points","velocity","this","ExplodingParticle","_this","animationDuration","radius","Math","random","life","remainingLife","speed","draw","ctx","p","beginPath","arc","startX","startY","PI","fill","closePath","getRandomIntInclusive","min","max","ceil","floor","canvas","dotInterval","GameInstructions","props","react_default","a","createElement","className","Button","onClick","text","Checkbox","htmlFor","id","title","label","type","name","onChange","value","Range","defaultValue","step","GameMenu","score","gameHelpers_Button","toggleGame","btnText","gameHelpers_Range","minVelocity","maxVelocity","sliderChange","gameHelpers_Checkbox","checked","brutal","toggleBrutal","dotCount","dotList","scoreScale","particles","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","clickDot","bind","assertThisInitialized","runGame","state","started","paused","initializeCanvas","removeEventListener","clearInterval","_this2","document","getElementById","height","window","innerHeight","innerWidth","getContext","addEventListener","i","push","actual","setInterval","checkFocus","addDot","hasFocus","setState","_this$state","forEach","dot","inverse","find","scale","opacity","round","fillStyle","concat","length","newVelocity","dotWidth","dotY","dotX","val","delta","normalizeRange","e","target","valueAsNumber","_this3","pos","clientX","clientY","filter","isDotClicked","addScore","setupParticles","sqrt","pow","prevState","subtractScore","splice","event","count","localX","localY","createParticleAtPoint","colorData","particle","startTime","Date","now","timestamp","clearRect","drawDot","collisionDetection","animateParticles","requestAnimationFrame","_this$state2","components_GameMenu","gameHelpers_GameInstructions","PureComponent","App","components_Game","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","URL","process","origin","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.16715210.chunk.js","sourcesContent":["import React from 'react';\n// Dot factory\nexport function Dot(dotId, width, y, x, status, points, velocity) {\n  this.dotId = dotId;\n  this.width = width;\n  this.y = y;\n  this.x = x;\n  this.velocity = velocity; // velocity is constant\n  this.status = status; // 1=show, 0=remove\n  this.points = points;\n}\n\n// exploding particle factory\n// https://css-tricks.com/adding-particle-effects-to-dom-elements-with-canvas/\nexport function ExplodingParticle() {\n  this.animationDuration = 1000;\n  this.radius = 5 + Math.random() * 5;\n  this.life = 30 + Math.random() * 10;\n  this.remainingLife = this.life;\n  this.speed = {\n    x: -5 + Math.random() * 10,\n    y: -5 + Math.random() * 10,\n  };\n\n  this.draw = ctx => {\n    let p = this;\n\n    if (this.remainingLife > 0 && this.radius > 0) {\n      // draw at the current location\n      ctx.beginPath();\n      ctx.arc(p.startX, p.startY, p.radius, 0, Math.PI * 2);\n      ctx.fill();\n      ctx.closePath();\n\n      // update postion & life\n      p.remainingLife--;\n      p.radius -= 0.25;\n      p.startX += p.speed.x;\n      p.startY += p.speed.y;\n    }\n  };\n}\n\nexport function normalizeRange(val, min, max, scoreScale) {\n  // return inverse value (i.e. larger dot = smaller value)\n  // normalize scale 1-10\n  const delta = max - min;\n  let value = Math.round(((val - min) / delta) * 2);\n  value = value > 10 ? 10 : value; // some rounding goes to 11\n  // map value to points\n  const normalized = scoreScale.find(scale => scale.points === value);\n\n  return normalized.actual;\n}\n\nexport function getRandomIntInclusive(min, max) {\n  // max and minimum is inclusive\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const GameInstructions = props => {\n  return (\n    <div className=\"app-instructions\">\n      Get points by popping randomly sized dots as they drift down. Smaller dots\n      are worth more points. Use the slider to adjust speed.\n    </div>\n  );\n};\n\nexport const Button = props => {\n  return (\n    <button className={props.className} onClick={props.onClick}>\n      {props.text}\n    </button>\n  );\n};\n\nexport const Checkbox = props => {\n  return (\n    <div className={props.className}>\n      <label htmlFor={props.id} title={props.title}>\n        {props.label}\n      </label>\n      <input\n        type=\"checkbox\"\n        id={props.id}\n        name={props.name}\n        onChange={props.onChange}\n        value={props.value}\n      />\n    </div>\n  );\n};\n\nexport const Range = props => {\n  return (\n    <div className=\"app-slider\">\n      <label className=\"sr-only\" htmlFor=\"app-slider\">\n        {props.label}\n      </label>\n      <input\n        type=\"range\"\n        className={props.className}\n        name={props.id}\n        id={props.id}\n        min={props.min}\n        max={props.max}\n        defaultValue={props.velocity}\n        step=\"1\"\n        onChange={props.onChange}\n      />\n    </div>\n  );\n};\n","/*\nDot Game - The goal of this exercise is to create a game.\nIn the game, dots move from the top to the bottom\nof the screen. A player tries to click on the dots,\nand receives points when they are successful.\n\n- start button turns to pause\n- dots fall at ajustable rate of 10-100 pixels\n- new dot every second randomly at top (always whole)\n- dots random size of 10-100 pixels\n- points 1-10 (largest to smallest)\n- clicking dot removes it and scores\n*/\nimport React, {PureComponent} from 'react';\nimport GameMenu from './GameMenu';\nimport {\n  Dot,\n  ExplodingParticle,\n  normalizeRange,\n  getRandomIntInclusive,\n  GameInstructions,\n} from './gameHelpers';\nimport '../app.css';\n\n// game vars\nlet canvas, ctx, dotInterval;\nlet dotId = 1;\nlet dotCount = 1;\nlet dotList = [];\nlet velocity = 10; // pixels per sec\nlet minVelocity = 10;\nlet maxVelocity = 100;\nlet minWidth = 5; // radius\nlet maxWidth = 50;\nlet scoreScale = []; // mapped values for score and opacity\nlet particles = [];\n\nclass Game extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.clickDot = this.clickDot.bind(this);\n    this.toggleGame = this.toggleGame.bind(this);\n    this.toggleBrutal = this.toggleBrutal.bind(this);\n    this.runGame = this.runGame.bind(this);\n\n    this.state = {\n      score: 0,\n      started: false,\n      paused: false,\n      brutal: false,\n    };\n  }\n\n  componentDidMount() {\n    this.initializeCanvas();\n    this.runGame();\n  }\n\n  componentWillUnmount() {\n    canvas.removeEventListener('click', this.clickDot, false);\n    clearInterval(dotInterval);\n  }\n\n  initializeCanvas() {\n    canvas = document.getElementById('game');\n    canvas.height = window.innerHeight;\n    canvas.width = window.innerWidth;\n    ctx = canvas.getContext('2d');\n    // events\n    canvas.addEventListener('click', this.clickDot, false);\n    // set score scale\n    for (let i = 1, len = 11; i < len; i++) {\n      scoreScale.push({points: i, actual: len - i});\n    }\n    // add a new dot every second\n    dotInterval = window.setInterval(() => {\n      this.checkFocus();\n      this.addDot();\n    }, 1000);\n  }\n\n  checkFocus() {\n    const hasFocus = document.hasFocus() ? true : false;\n    // pause if document loses focus\n    if (!hasFocus && !this.state.paused) {\n      this.setState({paused: true});\n    }\n  }\n\n  drawDot() {\n    const {paused, started} = this.state;\n\n    dotList.forEach(dot => {\n      if (dot.status === 1) {\n        // get inverse value\n        const inverse = scoreScale.find(scale => scale.points === dot.points);\n        // set opacity based on score\n        let opacity = Math.round(inverse.actual) * 0.1;\n        opacity = opacity <= 0.1 ? 0.15 : opacity;\n\n        dotCount = dotCount++;\n        ctx.beginPath();\n        ctx.arc(dot.x, dot.y, dot.width, 0, Math.PI * 2);\n        ctx.fillStyle = `rgba(29, 133, 240, ${opacity})`;\n        ctx.fill();\n        ctx.closePath();\n      }\n    });\n\n    // set new dot position\n    for (let i = dotList.length; i >= 0; i--) {\n      if (dotList[i] && !paused && started) {\n        // normalize velocity for correct timing for 60fps\n        const newVelocity = (velocity / 10) * 0.5;\n        dotList[i].y = Math.round(dotList[i].y) + newVelocity;\n      }\n    }\n  }\n\n  addDot() {\n    // only add dots when game is running\n    if (this.state.paused || !this.state.started) return;\n\n    const dotWidth = getRandomIntInclusive(minWidth, maxWidth);\n    const dotY = -dotWidth; // start off canvas\n    let dotX = getRandomIntInclusive(1, canvas.width);\n    const status = 1;\n    const points = normalizeRange(dotWidth, 1, 10, scoreScale);\n    // prevent right edge cutting off\n    if (dotX > canvas.width - dotWidth) {\n      dotX = dotX - dotWidth;\n    }\n    // prevent left edge cutting off\n    if (dotX <= dotWidth) {\n      dotX = dotWidth;\n    }\n\n    // add random properties\n    dotList[dotId++] = new Dot(\n      dotId,\n      dotWidth,\n      dotY,\n      dotX,\n      status,\n      points,\n      velocity,\n    );\n  }\n\n  sliderChange(e) {\n    velocity = e.target.valueAsNumber;\n  }\n\n  clickDot(e) {\n    const pos = {\n      x: e.clientX,\n      y: e.clientY,\n    };\n\n    // remove empty\n    dotList = dotList.filter(dot => {\n      return dot;\n    });\n\n    dotList.forEach((dot, i) => {\n      // check status to prevent multiple clicks\n      if (this.isDotClicked(pos, dot) && dot.status) {\n        // set score and remove\n        this.addScore(dot.points);\n        dot.status = 0;\n        // set up popped animation\n        this.setupParticles(dot, pos);\n      }\n    });\n  }\n\n  isDotClicked(pos, dot) {\n    return (\n      Math.sqrt((pos.x - dot.x) ** 2 + (pos.y - dot.y) ** 2) < dot.width * 1.1\n    );\n  }\n\n  addScore(points) {\n    this.setState(prevState => ({\n      score: prevState.score + points,\n    }));\n  }\n\n  subtractScore(points) {\n    this.setState(prevState => ({\n      score: prevState.score - points,\n    }));\n  }\n\n  collisionDetection() {\n    for (let i = dotList.length; i >= 0; i--) {\n      if (dotList[i]) {\n        // remove after reaching past bottom\n        if (dotList[i].y - dotList[i].width >= canvas.height) {\n          // brutal mode substracts from the score\n          if (this.state.brutal && dotList[i].status === 1) {\n            this.subtractScore(dotList[i].points);\n          }\n          dotList.splice(i, 1);\n        }\n      }\n    }\n  }\n\n  toggleGame(event) {\n    if (!this.state.started) {\n      this.setState({started: true});\n    } else {\n      this.setState(prevState => ({paused: !prevState.paused}));\n    }\n  }\n\n  toggleBrutal() {\n    this.setState(prevState => ({brutal: !prevState.brutal}));\n  }\n\n  // popped animation\n  setupParticles(dot, pos) {\n    let reductionFactor = 17; //prevent too many particles\n    let width = dot.width * 2;\n    let height = width;\n    let count = 0;\n\n    // fill particles inside dot\n    for (let localX = 0; localX < width; localX++) {\n      for (let localY = 0; localY < height; localY++) {\n        if (count % reductionFactor === 0) {\n          this.createParticleAtPoint(pos.x, pos.y);\n        }\n        count++;\n      }\n    }\n  }\n\n  createParticleAtPoint(x, y, colorData) {\n    let particle = new ExplodingParticle();\n    particle.startX = x;\n    particle.startY = y;\n    particle.startTime = Date.now();\n\n    particles.push(particle);\n  }\n\n  animateParticles() {\n    // Draw all of our particles in their new location\n    for (let i = 0; i < particles.length; i++) {\n      particles[i].draw(ctx);\n\n      // clean up if the last particle is done animating\n      if (i === particles.length - 1) {\n        let percent =\n          (Date.now() - particles[i].startTime) /\n          particles[i].animationDuration;\n\n        if (percent > 1) {\n          particles = [];\n        }\n      }\n    }\n  }\n\n  runGame(timestamp) {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    this.drawDot();\n    this.collisionDetection();\n    this.animateParticles();\n    // loop draw\n    window.requestAnimationFrame(this.runGame);\n  }\n\n  render() {\n    const {brutal, score, started, paused} = this.state;\n    const btnText = !started || paused ? 'START' : 'PAUSE';\n\n    return (\n      <div className=\"app\">\n        <GameMenu\n          maxVelocity={maxVelocity}\n          minVelocity={minVelocity}\n          score={score}\n          sliderChange={this.sliderChange}\n          btnText={btnText}\n          toggleBrutal={this.toggleBrutal}\n          toggleGame={this.toggleGame}\n          velocity={velocity}\n          checked={brutal}\n        />\n\n        {!started && <GameInstructions />}\n\n        <div className=\"app-game\">\n          {paused && started && <h2 className=\"app-message\">PAUSED</h2>}\n          <canvas id=\"game\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport {Button, Checkbox, Range} from './gameHelpers';\n\nconst GameMenu = props => {\n  return (\n    <div className=\"app-menu\">\n      <div className=\"app-score-wrapper\">\n        <b className=\"app-score\">{props.score}</b>\n        <Button\n          className=\"app-btn\"\n          onClick={props.toggleGame}\n          text={props.btnText}\n        />\n      </div>\n      <div className=\"app-tools\">\n        <Range\n          className=\"app-slider-input\"\n          id=\"app-slider\"\n          label=\"Speed adjustment\"\n          min={props.minVelocity}\n          max={props.maxVelocity}\n          onChange={props.sliderChange}\n          velocity={props.velocity}\n        />\n        <Checkbox\n          checked={props.brutal}\n          className=\"app-brutal\"\n          id=\"brutal\"\n          label={`😬`}\n          name=\"brutal\"\n          onChange={props.toggleBrutal}\n          title=\"brutal mode substracts points if a dot reaches the end\"\n          value=\"true\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default GameMenu;\n","import React, {Component} from 'react';\nimport Game from './components/Game';\n\nclass App extends Component {\n  render() {\n    return <Game />;\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}